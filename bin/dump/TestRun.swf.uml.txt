digraph G {
  fontname="Bitstream Vera Sans Mono";  
  fontsize=8;  
  ranksep=2;  
  ratio=auto;  
  graph[  
    rankdir= "TB",    
    splines= true,    
    overlap= false    
  ];  
  node[  
    fontname="Bitstream Vera Sans Mono",    
    fontsize=8,    
    shape="record"    
  ];  
  edge[  
    fontname="Bitstream Vera Sans Mono",    
    fontsize=8,    
    arrowhead="empty"    
  ];  
  subgraph clusterP0{  
    42 [label="{FASTLog\n\{final\}|$ + LOG_LEVEL_ACTION: int = 1 \{read-only\}\l$ + LOG_LEVEL_DETAIL: int = 2 \{read-only\}\l$ + LOG_LEVEL_ERROR: int = 0 \{read-only\}\l$ + LOG_LEVEL_NONE: int = -1 \{read-only\}\l$ - ins: FASTLog\l+ level: int = 1\l- logger: ILog\l|$ + instance(): FASTLog \{final\}\l+ addGlobalError(p0: null): void\l+ log(p0: String, p1: int = 0): void\l+ setLogger(p0: ILog): void\l- errorLog(p0: Event): void\l}"];    
    41 [label="{\<\<interface\>\>\nILog|addGlobalError(p0: null): void\llog(p0: String, p1: int = 0): void\lsetLogger(p0: ILog): void\l}"];    
    40 [label="{FASTMouse|$ + x: Number = 0\l$ + y: Number = 0\l|}"];    
    38 [label="{SingletonError\n\{final\}||}"];    
    28 [label="{FASTEventDispatcher|- dict: Dictionary\l|+ once(p0: String, p1: Function): null\l+ when(p0: String, p1: Function): null\l- runonce(p0: Event): void\l}"];    
    27 [label="{\<\<interface\>\>\nIFASTEventDispatcher|once(p0: String, p1: Function): null\lwhen(p0: String, p1: Function): null\l}"];    
    label="com.fastframework.core";    
  }  
  subgraph clusterP1{  
    31 [label="{ButtonClipEvent\n\{final\}|$ + CLICK: String = \"click\" \{read-only\}\l$ + FOCUS: String = \"focus\" \{read-only\}\l$ + MOUSE_DOWN: String = \"mouseDown\" \{read-only\}\l$ + MOUSE_OUT: String = \"mouseOut\" \{read-only\}\l$ + MOUSE_OVER: String = \"mouseOver\" \{read-only\}\l$ + MOUSE_UP: String = \"mouseUp\" \{read-only\}\l$ + RESET: String = \"reset\" \{read-only\}\l$ + ROLL_OUT: String = \"rollOut\" \{read-only\}\l$ + ROLL_OVER: String = \"rollOver\" \{read-only\}\l$ + SELECT: String = \"select\" \{read-only\}\l|}"];    
    label="com.fastframework.view.events";    
  }  
  subgraph clusterP2{  
    13 [label="{ArrayIterator|- index: Number = 0\l- list: Array\l|+ hasNext(): Boolean\l+ next(): Object\l+ reset(): void\l}"];    
    12 [label="{\<\<interface\>\>\nIterator|hasNext(): Boolean\lnext(): Object\lreset(): void\l}"];    
    label="asunit.util";    
  }  
  subgraph clusterP3{  
    36 [label="{ButtonEvt\n\{final\}|- _focus: Boolean = false\l- _select: Boolean = false\l- elements: Dictionary\l- hitarea: SimpleButton\l- outDelay: Number = 0\l- overDelay: Number = 0\l- timerOut: Timer\l- timerOver: Timer\l|+ addElement(p0: IButtonElement): IButtonClip\l+ clearMouseOut(): IButtonClip\l+ clearMouseOver(): IButtonClip\l+ focus(p0: Boolean = true): IButtonClip\l+ getElements(): Dictionary\l+ getFocus(): Boolean\l+ getSelect(): Boolean\l+ select(p0: Boolean = true): IButtonClip\l+ setMouseOutDelay(p0: int): IButtonClip\l+ setMouseOverDelay(p0: int): IButtonClip\l- click(p0: MouseEvent): void\l- doOut(): void\l- doOver(): void\l- down(p0: MouseEvent): void\l- onOverOut(p0: MouseEvent): void\l- out(p0: MouseEvent): void\l- over(p0: MouseEvent): void\l- reset(): void\l}"];    
    30 [label="{ButtonClip\n\{final\}|+ repeatPerFrame: int = 0\l- _enabled: Boolean = true\l- base: ButtonEvt\l- baseIsDown: Boolean = false\l- count: int\l- view: DisplayObjectContainer\l|+ addElement(p0: IButtonElement): IButtonClip\l+ clearMouseOut(): IButtonClip\l+ clearMouseOver(): IButtonClip\l+ focus(p0: Boolean = true): IButtonClip\l+ getElements(): Dictionary\l+ getEnabled(): Boolean\l+ getFocus(): Boolean\l+ getSelect(): Boolean\l+ select(p0: Boolean = true): IButtonClip\l+ setEnabled(p0: Boolean): void\l+ setMouseOutDelay(p0: int): IButtonClip\l+ setMouseOverDelay(p0: int): IButtonClip\l- down(p0: Event): void\l- forwardEvent(p0: Event): void\l- loop(p0: Event): void\l- up(p0: Event): void\l}"];    
    29 [label="{\<\<interface\>\>\nIButtonClip|addElement(p0: IButtonElement): IButtonClip\lclearMouseOut(): IButtonClip\lclearMouseOver(): IButtonClip\lfocus(p0: Boolean = true): IButtonClip\lgetElements(): Dictionary\lgetFocus(): Boolean\lgetSelect(): Boolean\lselect(p0: Boolean = true): IButtonClip\lsetMouseOutDelay(p0: int): IButtonClip\lsetMouseOverDelay(p0: int): IButtonClip\l}"];    
    15 [label="{\<\<interface\>\>\nIButtonElement|buttonDown(p0: Event): void\lbuttonOut(p0: Event): void\lbuttonOver(p0: Event): void\lbuttonReset(p0: Event): void\l}"];    
    label="com.fastframework.view";    
  }  
  subgraph clusterP4{  
    19 [label="{FASTEventDispatcherTest|- asyncCallBack: Function\l- dispatchCount: int = 0\l- instance: FASTEventDispatcher\l|# setUp(): void \{redefines setUp\}\l# tearDown(): void \{redefines tearDown\}\l+ testAddEventListener(): void\l+ testAddTwice(): void\l+ testInstance(): void\l+ testOnce(): void\l+ testWhen(): void\l- postAddEventListener(p0: Event): void\l- postAddTwice(p0: Event): void\l- postOnce(p0: Event): void\l- postWhenChange(p0: Event): void\l}"];    
    18 [label="{NavigationTest|- asyncEventChange: Function\l- instance: Navigation\l- navKey: String = \"1_0\"\l- navKeyToEvaluate: String\l- targetContainer: String = \"top\"\l|# setUp(): void \{redefines setUp\}\l# tearDown(): void \{redefines tearDown\}\l+ testEventChange(): void\l+ testInstance(): void\l+ testNavStackRequest(): void\l- postEventChange(p0: NavigationEvent): void\l- postNavStackRequest(p0: NavigationEvent): void\l}"];    
    16 [label="{ButtonClipTest|- asyncCallBack: Function\l- btn: SimpleButton\l- instance: ButtonClip\l|# setUp(): void \{redefines setUp\}\l# tearDown(): void \{redefines tearDown\}\l+ testAddElement(): void\l+ testElement(): void\l+ testInstance(): void\l+ testMouseDown(): void\l+ testReset(): void\l+ testSelect(): void\l- postMouseDown(p0: Event): void\l- postTestReset(p0: Event): void\l- postTestSelect(p0: Event): void\l}"];    
    label="tests.core";    
  }  
  subgraph clusterP5{  
    35 [label="{AsynchronousTestCase|$ - INVALID_TIME: int = -1 \{read-only\}\l$ DEFAULT_REMOTE_TIMEOUT: int = 30000 \{read-only\}\l+ ioErrorExpected: void \{write-only\}\l+ remoteDuration: int \{read-only\}\l+ remoteTimeout: void \{write-only\}\l+ securityErrorExpected: void \{write-only\}\l- _ioErrorExpected: Boolean\l- _remoteDuration: int\l- _remoteStartTime: int\l- _remoteTimeout: int\l- _securityErrorExpected: Boolean\l|# completeHandler(p0: Event): void \{final\}\l# configureListeners(p0: URLLoader): void\l# httpStatusHandler(p0: HTTPStatusEvent): void\l# ioErrorHandler(p0: IOErrorEvent): void \{final\}\l# openHandler(p0: Event): void\l# progressHandler(p0: ProgressEvent): void\l# runTests(): void \{final\}\l# securityErrorHandler(p0: SecurityErrorEvent): void \{final\}\l# setDataSource(p0: Event): void\l+ remoteDurationIsValid(): Boolean\l+ run(): void \{redefines run\}\l+ testRemoteDuration(): void\l+ testUnauthorizedAccess(): void\l- setRemoteDuration(): void \{final\}\l- startRemoteDuration(): void \{final\}\l}"];    
    22 [label="{TestFailure|# fFailedTest: Test\l# fFailedTestMethod: String\l# fThrownException: Error\l|+ exceptionMessage(): String\l+ failedFeature(): String\l+ failedMethod(): String\l+ failedTest(): Test\l+ isFailure(): Boolean\l+ thrownException(): Error\l+ toString(): String\l}"];    
    14 [label="{AsyncOperation|- callback: Function\l- duration: Number\l- failureHandler: Function\l- testCase: TestCase\l- timeout: Timer\l|+ getCallback(): Function\l- onTimeoutComplete(p0: TimerEvent): void\l}"];    
    10 [label="{TestResult|# fErrors: Array\l# fFailures: Array\l# fListeners: Array\l# fRunTests: int\l- fStop: Boolean\l|+ addError(p0: Test, p1: Error): void\l+ addFailure(p0: Test, p1: AssertionFailedError): void\l+ addListener(p0: TestListener): void\l+ endTest(p0: Test): void\l+ endTestMethod(p0: Test, p1: String): void\l+ errorCount(): int\l+ errors(): Array\l+ failureCount(): int\l+ failures(): Array\l+ removeListener(p0: TestListener): void\l+ run(p0: Test): void\l+ runCount(): int\l+ shouldStop(): Boolean\l+ startTest(p0: Test): void\l+ startTestMethod(p0: Test, p1: String): void\l+ stop(): void\l+ wasSuccessful(): Boolean\l}"];    
    7 [label="{\<\<interface\>\>\nTestListener|addError(p0: Test, p1: Error): void\laddFailure(p0: Test, p1: AssertionFailedError): void\lendTest(p0: Test): void\lendTestMethod(p0: Test, p1: String): void\lrun(p0: Test): void\lstartTest(p0: Test): void\lstartTestMethod(p0: Test, p1: String): void\l}"];    
    4 [label="{TestSuite|- fTests: Array\l- isRunning: Boolean\l- iterator: ArrayIterator\l- testsCompleteCount: Number = 0\l|# setTestMethods(p0: XMLList): void \{redefines setTestMethods\}\l+ addTest(p0: Test): void\l+ countTestCases(): int \{redefines countTestCases\}\l+ getIsComplete(): Boolean \{redefines getIsComplete\}\l+ run(): void \{redefines run\}\l+ setContext(p0: DisplayObjectContainer): void \{redefines setContext\}\l+ testCount(): int\l+ toString(): String \{redefines toString\}\l- getIterator(): ArrayIterator\l- testCompleteHandler(p0: Event): void\l}"];    
    3 [label="{TestCase|# context: DisplayObjectContainer\l# fName: String\l# isComplete: Boolean\l# result: TestListener\l# testMethods: Array\l$ DEFAULT_TIMEOUT: int = 1000 \{read-only\}\l$ PRE_SET_UP: int = 0 \{read-only\}\l$ RUN_METHOD: int = 2 \{read-only\}\l$ SET_UP: int = 1 \{read-only\}\l$ TEAR_DOWN: int = 3 \{read-only\}\l- asyncQueue: Array\l- currentMethod: String\l- currentState: int\l- layoutManager: Object\l- methodIterator: Iterator\l- runSingle: Boolean\l|# addAsync(p0: Function = null, p1: Number = 1000, p2: Function = null): Function\l# addChild(p0: DisplayObject): DisplayObject\l# cleanUp(): void\l# createResult(): TestResult\l# removeChild(p0: DisplayObject): DisplayObject\l# runTearDown(): void\l# setTestMethods(p0: XMLList): void\l# setUp(): void\l# tearDown(): void\l+ countTestCases(): int\l+ getContext(): DisplayObjectContainer\l+ getCurrentMethod(): String\l+ getIsComplete(): Boolean\l+ getName(): String\l+ getTestMethods(): Array\l+ run(): void\l+ runBare(): void\l+ setContext(p0: DisplayObjectContainer): void\l+ setName(p0: String): void\l+ setResult(p0: TestListener): void\l+ toString(): String \{redefines toString\}\l- getMethodIterator(): Iterator\l- resolveLayoutManager(): void\l- runMethod(p0: String): void\l- waitForAsync(): Boolean\l~ asyncOperationComplete(p0: AsyncOperation): void\l~ asyncOperationTimeout(p0: AsyncOperation, p1: Number, p2: Boolean = true): void\l~ getResult(): TestListener\l}"];    
    2 [label="{Assert||$ + assertEquals(): void \{final\}\l$ + assertEqualsArrays(): void \{final\}\l$ + assertEqualsArraysIgnoringOrder(): void \{final\}\l$ + assertEqualsFloat(): void \{final\}\l$ + assertFalse(): void \{final\}\l$ + assertNotNull(): void \{final\}\l$ + assertNotSame(): void \{final\}\l$ + assertNull(): void \{final\}\l$ + assertSame(): void \{final\}\l$ + assertThrows(p0: Class, p1: Function): void \{final\}\l$ + assertTrue(): void \{final\}\l$ + fail(p0: String): void \{final\}\l$ - failNotEquals(p0: String, p1: Object, p2: Object): void \{final\}\l$ - failNotSame(p0: String, p1: Object, p2: Object): void \{final\}\l$ - failSame(p0: String): void \{final\}\l$ - format(p0: String, p1: Object, p2: Object): String \{final\}\l}"];    
    1 [label="{\<\<interface\>\>\nTest|countTestCases(): int\lgetContext(): DisplayObjectContainer\lgetCurrentMethod(): String\lgetIsComplete(): Boolean\lgetName(): String\lgetTestMethods(): Array\lrun(): void\lrunBare(): void\lsetContext(p0: DisplayObjectContainer): void\lsetResult(p0: TestListener): void\ltoString(): String\l}"];    
    label="asunit.framework";    
  }  
  subgraph clusterP6{  
    34 [label="{NavigationEvent\n\{final\}|$ + CHANGE: String = \"change\" \{read-only\}\l+ eventDispatcher: Object\l+ isSuppress: Boolean\l+ navKey: String\l+ targetContainer: String\l|}"];    
    33 [label="{Navigation\n\{final\}|$ - ins: Navigation\l- navKey: String\l- navStackRequests: Array\l|$ + instance(): Navigation \{final\}\l+ changeSection(p0: String, p1: String = \"\", p2: Boolean = false, p3: Object = null): void\l+ changeSections(p0: Array): void\l+ getNavKey(): String\l+ getNavStackRequests(): Array\l+ nextSection(): void\l}"];    
    32 [label="{NavStackRequest\n\{final\}|+ eventDispatcher: Object\l+ isSuppress: Boolean\l+ navKey: String\l+ targetContainer: String\l|+ toString(): String\l}"];    
    label="com.fastframework.navigation";    
  }  
  subgraph clusterP7{  
    39 [label="{AbstractError||}"];    
    26 [label="{InstanceNotFoundError||}"];    
    11 [label="{AssertionFailedError||}"];    
    label="asunit.errors";    
  }  
  subgraph clusterP8{  
    23 [label="{TestTime|+ duration: int \{read-only\}\l- _duration: int\l- _name: String\l|$ + create(p0: Test, p1: int): TestTime \{final\}\l+ toString(): String\l}"];    
    9 [label="{ResultPrinter|# startTime: Number\l# testTimes: Array\l+ height: void \{redefines height\} \{write-only\}\l+ width: void \{redefines width\} \{write-only\}\l- backgroundColor: uint = 3355443\l- bar: SuccessBar\l- barHeight: Number = 3\l- fColumn: int = 0\l- gutter: uint = 0\l- showTrace: Boolean\l- textArea: TextField\l|# elapsedTimeAsString(p0: Number): String\l# printDefectHeader(p0: TestFailure, p1: int): void\l# printDefectTrace(p0: TestFailure): void\l# printDefects(p0: Object, p1: int, p2: String): void\l# printErrors(p0: TestResult): void\l# printFailures(p0: TestResult): void\l# printFooter(p0: TestResult): void\l# printHeader(p0: Number): void\l# printTimeSummary(): void\l+ addError(p0: Test, p1: Error): void\l+ addFailure(p0: Test, p1: AssertionFailedError): void\l+ endTest(p0: Test): void\l+ endTestMethod(p0: Test, p1: String): void\l+ onFormatTimeout(p0: TextFormat, p1: uint, p2: uint): void\l+ print(): void\l+ printDefect(p0: TestFailure, p1: int): void\l+ printResult(p0: TestResult, p1: Number): void\l+ println(): void\l+ run(p0: Test): void\l+ setShowTrace(p0: Boolean): void\l+ startTest(p0: Test): void\l+ startTestMethod(p0: Test, p1: String): void\l- configureAssets(): void\l}"];    
    0 [label="{TestRunner|# fPrinter: ResultPrinter\l# result: TestResult\l# startTime: Number\l$ + EXCEPTION_EXIT: int = 2 \{read-only\}\l$ + FAILURE_EXIT: int = 1 \{read-only\}\l$ + SHOW_TRACE: Boolean = true \{read-only\}\l$ + SUCCESS_EXIT: int = 0 \{read-only\}\l|# addedHandler(p0: Event): void\l+ doRun(p0: Test, p1: Boolean = false): TestResult\l+ getPrinter(): ResultPrinter\l+ setPrinter(p0: ResultPrinter): void\l+ start(p0: Class, p1: String = null, p2: Boolean = false): TestResult\l- configureListeners(): void\l- resizeHandler(p0: Event): void\l- testCompleteHandler(p0: Event): void\l}"];    
    label="asunit.textui";    
  }  
  subgraph clusterP9{  
    21 [label="{Version|$ - version: String = \"3.0\"\l|$ + id(): String \{final\}\l}"];    
    20 [label="{BaseTestRunner||$ + getFilteredTrace(p0: String): String \{final\}\l}"];    
    label="asunit.runner";    
  }  
  subgraph clusterP10{  
    5 [label="{TestRun||}"];    
    label="TopLevel";    
  }  
  subgraph clusterP11{  
    37 [label="{MovieClipTools\n\{final\}||$ + alignCenter(p0: DisplayObject, p1: DisplayObject): void \{final\}\l$ + captureTransform(p0: DisplayObject): Transform \{final\}\l$ + drawRect(p0: Sprite, p1: Number, p2: Number, p3: Number, p4: Number, p5: Number): void \{final\}\l$ + findButton(p0: DisplayObjectContainer): SimpleButton \{final\}\l$ + findTextField(p0: DisplayObjectContainer): TextField \{final\}\l$ + findVideo(p0: DisplayObjectContainer): Video \{final\}\l$ + killMovieClip(p0: DisplayObject): void \{final\}\l$ + makeClickDisable(p0: InteractiveObject): void \{final\}\l$ + matchSize(p0: DisplayObject, p1: DisplayObject, p2: Boolean = false): void \{final\}\l$ + notResize(p0: DisplayObject): void \{final\}\l$ + pixelAlign(p0: DisplayObject): void \{final\}\l$ + print(p0: DisplayObject): String \{final\}\l}"];    
    label="com.fastframework.core.utils";    
  }  
  edge[style="solid"];  
  3 -> 2;  
  4 -> 3;  
  5 -> 0;  
  6 -> 4;  
  16 -> 3;  
  18 -> 3;  
  19 -> 3;  
  25 -> 23;  
  30 -> 28;  
  33 -> 28;  
  35 -> 3;  
  36 -> 28;  
  edge[style="dashed"];  
  label="Powered by Apparat - http://apparat.googlecode.com/";  
}
