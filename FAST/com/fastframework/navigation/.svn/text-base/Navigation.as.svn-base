package com.fastframework.navigation {	import com.fastframework.error.SingletonError;	import com.fastframework.event.EventDispatcherUtils;	import com.fastframework.navigation.NavStackRequest;	import com.fastframework.navigation.NavigationEvent;	import flash.events.EventDispatcher;	/**	 * @author colin	 */		final public class Navigation extends EventDispatcher implements IFASTEventDispatcher{		private static var ins:Navigation;		public static function instance():Navigation {			ins ||=new Navigation(new SingletonBlocker());			return ins;		}		public function Navigation(p_key:SingletonBlocker) {			if(p_key==null)throw new SingletonError(this);			reset();		}		private var navKey : String;		private var navStackRequests:Array;			public function changeSection(navKey:String,targetContainer:String=null,isSuppress:Boolean=false,eventDispatcher:Object=null):void{			eventDispatcher=(eventDispatcher==null)?this:eventDispatcher;			this.navKey = navKey;				dispatchEvent(new NavigationEvent(NavigationEvent.CHANGE,navKey,targetContainer,isSuppress,eventDispatcher,false,true));		}				public function getCurrentNavKey() : String {			return (navStackRequests==null)?navKey:NavStackRequest(navStackRequests[navStackRequests.length-1]).navKey;		}				public function reset():void{			clearNavStackRequests();			navKey = null;		}			public function clearNavStackRequests() : void {			navStackRequests = null;		}				public function changeSections(navStackRequests:Array):void{			this.navKey = NavStackRequest(navStackRequests[navStackRequests.length - 1]).navKey;			this.navStackRequests = navStackRequests;			nextSection();		}				public function getNavStackRequests():Array{			return navStackRequests;		}				public function nextSection() : void {			if(navStackRequests.length<=0){				navStackRequests=null;				return;			}			var req:NavStackRequest = NavStackRequest(navStackRequests.shift());			changeSection(req.navKey,req.targetContainer,req.isSuppress,req.eventDispatcher);		}				public function when(eventType : String, whichObject : Object, callFunction : Function) : * {			EventDispatcherUtils.when(this,eventType,whichObject,callFunction);			return this;		}	}}internal class SingletonBlocker {}